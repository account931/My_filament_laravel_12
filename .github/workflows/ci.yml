#set up for Github workflow (happens on "Main" branch push: here we set up php, sql, migrate and run PhpUnit tests)
#PhpUnit test (biggest error were: 
                #error "LogicException: Invalid key supplied"  => because of missing Passport set up => php artisan passport:keys --force)
                #error 'SQLSTATE[HY000]: General error: 1 near "SET": syntax error (SQL: SET FOREIGN_KEY_CHECKS=0)' => because of using SQLLite
name: Laravel

on:
  push:
    branches: [ main ]  # Trigger on push to main branch   - '**'  # This will trigger the action for pushes to any branch
  pull_request:
    branches: [ main ]

jobs:
  
  # Job 1 (Pest tests and codesniffer). It is run in CI & has nothing to do with Dockerfile & docker-compose.yml --------------------
  job_1_my-pest-tests:      #job ID

    runs-on: ubuntu-latest
    
    services:
      # init SQL container (check version) *********
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
          MYSQL_USER: user1
          MYSQL_PASSWORD: userpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin --user=root --password=password ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      # end  init SQL container *******
      
      
    steps:
    - uses: actions/checkout@v2 # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access i
    
    # Set up PHP version (check version)-------------------
    - name: Set up PHP 8.4.8
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4.8' # fix here ->Specify the PHP version here
        coverage: xdebug      # Optional: Enable coverage with Xdebug
    # End Set up PHP
    
    #Copy env, makes a copy of '.env.example' & rename it to '.env', as '.env' is under Git ignore (not uploaded to github) ------------------------------
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
    # Install Dependencies ------------------
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress
    - name: Generate laravel key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      
    #
    #- name: Create Database
      #run: |
        #mysql -u user1 -p${{ 'password' }} -h 127.0.0.1 -e "CREATE DATABASE IF NOT EXISTS laravel_2024_migration_testing;"
      #run: |
        #mkdir -p database
        #touch database/database.sqlite
        
    #Compile js asserts -------------------
    - name: Compile assets
      run: |
        npm install
        npm run build # version for laravel 12  #version for laravel 6 => #npm run production
        
    #Set up environment for testing -------
    #copies the contents of the .env.testing file into .env. This is often used when you want your Laravel application to temporarily use the testing configuration as its main environment setup.
    - name: Set up environment for testing
      run: cp .env.testing .env
      
    #get sql ready ------------------------
    - name: Wait for MySQL service to be ready
      run: |
          for i in {30..0}; do
            if mysqladmin ping --host=127.0.0.1 --port=3306 --user=root --password=root_password --silent; then
              break
            fi
            echo 'Waiting for MySQL to start...'
            sleep 1
          done
          
    # Run database migrations -------------
    - name: Run database migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1  # Assuming MySQL is on the same container
        DB_PORT: 3306
        DB_DATABASE: laravel
        DB_USERNAME: user1         #does not matter what u have in .env, as .env is not on github & created from .env.example in this CI
        DB_PASSWORD: userpassword  # Replace with the correct password or leave empty if not used
      run: php artisan migrate --force  # --force is required to run in CI environment
      
    #Run Pest tests   -------------------
    - name: Execute Pest tests (Unit and Feature tests) 
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1  # Assuming MySQL is on the same container
        DB_PORT: 3306
        DB_DATABASE: laravel
        DB_USERNAME: user1
        DB_PASSWORD: userpassword   # Replace with the correct password or leave empty if not used
      run: |
        php artisan config:cache --env=testing                 #set up for testing
        #php artisan migrate --env=testing --force    
        #php artisan passport:client --personal --name=SomeName #generate Passport personal token
        #php artisan passport:install                           #Passport install
        #php artisan passport:keys --force         
        #php artisan db:disable-foreign-key   # we do it in prev step
        ./vendor/bin/pest   #run pest
        
     # Run Php Codesniffer check, so far we check /routes only (set in phpcs.xml.dist) (if want can run as a separated job) -------------
     #- name: Run Php Codesniffer check
     # run: composer codesniffer-check  # this command is set in composer.json, same as "php vendor/bin/phpcs"
      
   


   
   
  #---------------------------------------------------------------------------------------------------------------------------
  # Job 2(run PhpStan static analysis as a separated job. If want can run as in Job 1)
  job_2_phpstan-static-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4.8
      - name: Install dependencies
        run: composer install
      - name: Run PhpStan static 
        run: ./vendor/bin/phpstan analyse   --output-format=github
        
   

   
   
  

  # Job-7  send notification "Deploy successful" to telegram  ---------------------------------------------------
  job_7_notify_in_telegram:
    runs-on: ubuntu-latest
    needs: [job_1_my-pest-tests, job_2_phpstan-static-check]  #will run only after these jobs

    steps:
      - name: Send message to Telegram
        if: success()  #Run this job only if all previous jobs have succeeded."
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  #github secrets
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}   #github secrets
        run: |
          MESSAGE="✅ CI/CD on Filament 12 completed successfully on branch $GITHUB_REF"   #U+1F680 is UTF-8 for "rocket-icon".
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
   
      - name: Notify Telegram on Failure
        if: failure()  # only run if previous job failed
        run: |
          MESSAGE="❌ CI/CD on Filament 12 failed on branch $GITHUB_REF"     #U+274C  UTF-8 for "red cross".
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown




   
        
  # Job-6 Deploy somewhere (for example to AWS) ---------------------------------------------------
  # Authenticate to the the server via ssh 
  # and run our deployment script
  
  #job_6_deploy_to_cloud:
    #runs-on: ubuntu-latest
    #needs: [job_1_my-phpunit-tests, job_2_psalm-static-check, job_3_test-docker-compose-yml-images-build-and-run-containers, job_4_codesniffer-check]  #will run only after these jobs
    
    #steps:
      #- uses: actions/checkout@v2
      #- name: Deploy to server
        #uses: appleboy/ssh-action@master
        #with:
          #host: ${{ secrets.HOST }}
          #username: ${{ secrets.USERNAME }}
          #port: ${{ secrets.PORT }}
          #key: ${{ secrets.SSHKEY }}
          ##script: "cd /var/www/html && ./.scripts/deploy.sh"
          #run: | 
            
            #set -e                         #When you use set -e, the script stops running as soon as any command fails.     #!/bin/bash

            #echo "Deployment started ..."
            
            #(php artisan down) || true    # Enter maintenance mode or return true, if already is in maintenance mode

            #git pull origin production    # Pull the latest version of the app

            #composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader   # Install composer dependencies

            #php artisan clear-compiled     # Clear the old cache

            #php artisan optimize           # Recreate cache

            #npm run prod                   # Compile npm assets

            #php artisan migrate --force    # Run database migrations

            #php artisan up                 # Exit maintenance mode

            #echo "Deployment finished!"